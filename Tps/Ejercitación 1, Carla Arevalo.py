# -*- coding: utf-8 -*-
"""Ejercitación 1, Carla Arevalo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZFPAwgBpLv6H91PH4ZFypY4HH8qj18sR
"""

#PRIMER PASO

#Importo los módulos de pandas y numpy.
import pandas as pd
import numpy as np

#Monto el drive.
from google.colab import drive
drive.mount('/content/drive')

#Defino el filename para el dataset de OCEAN.
OCEAN = '/content/drive/My Drive/LaboDatos2021/ocean_safe.csv' 

#Abro el filename para el dataset de Coronadelicos.
Coronadelicos = '/content/drive/My Drive/LaboDatos2021/coronadelicos_safe.csv' 

#Cargo los datasets.
ocean_data = pd.read_csv(OCEAN)
coronadelicos_data = pd.read_csv(Coronadelicos)

#Ahora si, armo los dataframes.
ocean_df = pd.DataFrame(ocean_data)
coronadelicos_df = pd.DataFrame(coronadelicos_data)

#Los HASH son números identificatorios de los individuos. 

#Primero voy a reindexar los dfs por HASH para poder mergear tranky.

ocean_df = ocean_df.set_index('hash')
coronadelicos_df = coronadelicos_df.set_index('hash')

#Como voy a querer mergear los dataframes de manera tal que en el dataframe resultante sólo aparezcan aquellos individuos que participaron en ambos experimentos
#voy a hacerlo excluyendo a los que estuvieron en un experimento pero en otro no, es decir quedándome con la intersección (inner, y no outer).
df = pd.merge(ocean_df,coronadelicos_df, how="inner", on='hash')

###############################################################################
#SEGUNDO PASO
#Construyo el df para quienes consumieron marihuana al menos 1 vez.
#Para eso, busco aquellas filas para las cuales en la columna de consumo de marihuana se tuvo un valor distinto a -999 y me armo un df en base a aquellas filas. 
df_maria_si = df[df['7_marihuana']!=-999].copy()

#Construyo el df para quienes nunca consumieron marihuana, o sea quienes tuvieron un valor igual a -999.
df_maria_no = df[df['7_marihuana']==-999].copy()

#Idem con los que reportaron haber consumido sedativos y/o antidepresivos o antipsicóticos, o sea para quienes tuvieron valores distintos a -999 en las columnas de sedativos
#o en la de antidepresivos o antipsicóticos. Para eso, apelo a una disyunción incluyente (|).
df_sed_anti = df[(df['7_sedativos']!=-999) | (df['7_antidepresivos o antipsicoticos']!=-999)].copy()

###############################################################################
#TERCER PASO
#Quiero subseleccionar la información que nos brindan sólo las columnas de las 5 dimensiones de personalidad. 
#Para eso, primero enlisto sus nombres.
columnas_personalidad = ['1_extraversion', '1_agreeableness', '1_conscientiousness', '1_neuroticism', '1_openness']

#Ahora sí, subselecciono los datos del data frama de cada grupo de individuos.
#Para les que consumieron marihuana alguna vez, queda este df:
df_maria_si_personalidad = df_maria_si[columnas_personalidad].copy()

#Para les que nunca:
df_maria_no_personalidad = df_maria_no[columnas_personalidad].copy()

#Y para les que consumieron sedativos, antidepresivos o antipsicóticos, este:
df_sed_anti_personalidad = df_sed_anti[columnas_personalidad].copy()

###############################################################################
#CUARTO PASO
#Enlisto los nombres de los índices que quiero que tenga mi dataframe (i.e., los distintos grupos de individuos).
indices_df_grupos_sujetos = ['Marihuana', 'No marihuana', 'Drogas de prescripción']

#Genero un dataframe vacío con dichos índices y las columnas con los nombres de las dimensiones de personalidad, que había enlistado anteriormente. 
df_grupos_sujetos = pd.DataFrame(index=indices_df_grupos_sujetos, columns=columnas_personalidad)

#Voy a querer llenar este dataframe vacío. Para ello, por cada grupo de individuos voy a completar con los promedios encontrados para cada dimensión de personalidad.
#Para eso, itero por cada grupo (fila) y también por cada columna completando con el valor.
for column in df_grupos_sujetos:
        df_grupos_sujetos[column]['Marihuana'] = df_maria_si_personalidad[column].mean()    
        df_grupos_sujetos[column]['No marihuana'] = df_maria_no_personalidad[column].mean() 
        df_grupos_sujetos[column]['Drogas de prescripción'] = df_sed_anti_personalidad[column].mean() 

#Ahora bien, habria que normalizar esta tablita porque, como pide la consigna, es importante que todos los números estén entre 0 y 1.
#Para eso, divido por el valor más grande del drataframe.
df_grupos_sujetos = df_grupos_sujetos/df_grupos_sujetos.max().max()
#DUDA: Haciendo esto tuve una duda. Por qué normalizamos dividiendo los datos por el valor máximo de todo el dataframe y no normalizamos cada columna dividiendo sus valores
#por el máximo de cada una? No tiene más sentido normalizar por dimensión de personalidad? Siento que se mezclan las cosas. 

#Quiero usar la función de radar plot de Tomi.
#Primero importo el módulo que es necesario para el funcionamiento de esta herramienta de visualización.
import matplotlib.pylab as plt

#Ahora si, escribo la función de Tomi
def radar_plot(df, title = '',):
    categories = df.columns
    N = len(categories)
    # What will be the angle of each axis in the plot? (we divide the plot / number of variable)
    angles = [n / float(N) * 2 * np.pi for n in range(N)]
    angles += angles[:1]
     
    # Initialise the spider plot
    fig, ax = plt.subplots(figsize = (6,6), subplot_kw = {'projection': 'polar'})
     
    # If you want the first axis to be on top:
    ax.set_theta_offset(np.pi / 2)
    ax.set_theta_direction(-1)
     
    # Draw one axe per variable + add labels labels yet
    ax.set_xticks(angles[:-1])
    ax.set_xticklabels(categories,
                       fontsize = 12)
     
    # Draw ylabels
    ax.set_rlabel_position(0)
    ax.set_yticks([0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1])
    ax.set_yticklabels(["0.1","0.2","0.3","0.4","0.5","0.6", "0.7", "0.8", "0.9", "1"],
                       color = "darkgrey",
                       size = 7)
    ax.set_ylim(0,1)
    
    # ------- PART 2: Add plots
    
    # Plot each individual = each line of the data
    
    for row in df.iloc:
            values = row.values.flatten().tolist()
            values += values[:1]
            ax.plot(angles, values, linewidth=1.5, linestyle = 'solid', label = row.name)
            ax.fill(angles, values, 'b', alpha=0.1)
    # Add legend
    ax.legend(loc=(-0.2,-0.3),fontsize=12)
    ax.set_title(title, position=(.5, 1.2),fontsize=15,)

#Imprimo el gráfico (spoiler: quedó re lindo :) )
#radar_plot(df_grupos_sujetos)
#plt.title("Radarplot para los grupos de consumidores de marihuana, no consumidores de marihuana y drogas de prescripción")
#PARÉNTESIS: LO DEJÉ COMENTADO PORQUE DESPUÉS SE ME SUPERPONE CON EL HISTOGRAMA Y NO SÉ QUÉ ONDA.

#En respuesta a las preguntas:
#¿Cuáles son las diferencias entre el grupo de consumidores vs. no consumidores? ¿Vemos la única diferencia en la variable apertura, o hay otras diferencias aparentes?

#Parece que la mayor diferencia entre estos dos grupos se da en la variable de Openness: esto indicaría que los consumidores tienden a estar más abiertos a nuevas experiencias
#y a asumir mayores riesgos para satisfacerlas que los que no consumen. Por otro lado, hay una pequeña diferencia la variable Extraversion: consumidores de Marihuana parecieran ser seres
#más extrovertidos y sociables que los no consumidores. Además, se ve una diferencia marcada en la variable de Conscientiousness: resulta que quienes no consumen parecen individuos que son más 
#responsables y con una mayor capacidad de cumplir objetivos de forma prolija y ordenada que los individuos del grupo de consumidores. 

#¿Cuáles son las diferencias entre estos grupos y el grupo de personas que han reportado consumo de sedativos y/o sedativos o antipsicóticos?
#Por lo general se observan los valores similares para las variables de Openness, Extraversion y Agreeableness entre consumidores de marihuana y de sedativos y antipsicóticos: en 
#ambos grupos los individuos alcanzan mayores valores para dichas variables que los no consumidores. No obstante, los consumidores de sedativos y antipsicóticos tienden a mayores
#niveles de neuroticismo (Neuroticism) y son seres más ansiosos, con pensamientos negativos y más preocupados por las cosas que en los otros dos grupos, y además se diferencian, 
#al igual que los consumidores de marihuana, de los no consumidores en cuanto al grado de responsabilidad (Conscientiousness) al registrar menores valores en cuanto a esta
#dimensión de la personalidad respecto al grupo de no consumidores.

###############################################################################
#QUINTO PASO

#Primero importo seaborn, que es una herramienta complementaria de visualización.
import seaborn as sbn 

#Para cada dataframe (Marihuana, No marihuana y Sedativos, antidepresivos o antipsicóticos) agrego una columna a la derecha de todo que tenga por valor constante el tipo de dataframe:

#Para el de consumidores de marihuana:
df_maria_si_personalidad_new = df_maria_si_personalidad.assign(Grupo='Marihuana')

#Para el de los no consumidores de marihuana:
df_maria_no_personalidad_new = df_maria_no_personalidad.assign(Grupo='No marihuana')

#Para el de los consumidores de sedativos, antidepresivos o antipsicóticos:
df_sed_anti_personalidad_new = df_sed_anti_personalidad.assign(Grupo='Drogas de prescripción')

#Elijo evaluar la variable de Conscientiousness entre los grupos de Consumidores de marihuana y No consumidores de marihuana porque vi que hay una diferencia entre ambos grupos interesante.

#Appendeo esos dataframes.
df_marihuana = df_maria_no_personalidad_new.append(df_maria_si_personalidad_new)

#Hago el gráfico 
sbn.histplot(df_marihuana, x='1_conscientiousness', hue='Grupo', stat="probability", common_norm=False)
plt.ylabel("Probabilidad")
plt.xlabel("Conscientiousness")
plt.title("Contraste entre consumidores o no de Marihuana")
###############################################################################
#SEXTO PASO

#Me armo una función que calcule la D de Cohen, siguiendo la definición de la consigna.
def d_de_cohen(df_1, df_2, dimension):
  d = (df_1[dimension].mean() - df_2[dimension].mean()) / np.sqrt((pow(df_1[dimension].std(),2)+pow(df_2[dimension].std(),2))/2)
  return(d)

#Ahora utilizo los dfs de consumidores y no consumidores de marihuana y comparo la dimensión de Conscientiousness de ambos grupos .
d_de_cohen(df_maria_no_personalidad_new, df_maria_si_personalidad_new,'1_conscientiousness')

#La D de Cohen que obtuve mediante mi función me arroja un valor aproximado de 0.265. 
#Según la tablita, esto indicaría que, como es una d cercana a 0.20, se considera un efecto de magnitud pequeño y por lo tanto la diferencia entre ambas distribución no sería significativa.

