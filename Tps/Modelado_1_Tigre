{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Mis modelos (Perru)","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gpxxWX2pdxn9","executionInfo":{"status":"ok","timestamp":1625500534421,"user_tz":180,"elapsed":259,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}},"outputId":"a95d77ce-efc3-4019-d190-12f2ad5fe207"},"source":["#Importo los módulos de pandas y numpy.\n","import pandas as pd #Para manejo de base de datos\n","import numpy as np #Para manejo de arrays, operaciones matemáticas, etc.\n","from google.colab import drive #Para montar nuestro drive en la consola\n","import matplotlib.pylab as plt #Para gráficos\n","from sklearn.linear_model import LogisticRegression #El método de regresión logística que vamos a usar\n","from sklearn.metrics import confusion_matrix #Para la matriz de confusion\n","from sklearn.preprocessing import MinMaxScaler #Para normalizar datos\n","from sklearn.model_selection import train_test_split #Para dividir azarosamente los datos entre grupo de entrenamiento y grupo de testeo para cuando haga train test split\n","from sklearn.metrics import roc_curve #Para plantear las curvas ROC\n","from sklearn.metrics import roc_auc_score #Y conocer su score\n","from sklearn.model_selection import StratifiedKFold #Para poder hacer K folds\n","from sklearn.feature_selection import SelectKBest #Para poder seleccionar los k mejores features de mi modelo\n","from sklearn.linear_model import LogisticRegression #Para hacer regresión logística\n","from matplotlib.colors import ListedColormap #Para crear un colormap basado en colores\n","from sklearn.svm import SVC #Para el clasificador support vector classifier\n","from sklearn.metrics import roc_curve #Para plantear las curvas ROC\n","from sklearn.metrics import roc_auc_score #Y conocer su score\n","from datetime import datetime #Para formatear las fechas\n","#Monto el drive.\n","from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":218,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"tle92sLK0xqG"},"source":["Abro el csv con el dataframe que incluye las observaciones de Tigre"]},{"cell_type":"code","metadata":{"id":"U0_jfpSO0Twi","executionInfo":{"status":"ok","timestamp":1625500602341,"user_tz":180,"elapsed":246,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}}},"source":["df = pd.read_csv(\"/content/drive/MyDrive/Covidata_team/df_resultado.csv\")\n","df = df.dropna(axis=0, how='any', thresh=None, subset=None, inplace=False) #Desecho las filas con valores NaN\n","#df['FApertura'] = df['FApertura'].fillna(\"2025-01-01\")\n","#df['Ultimo Contacto'] = df['Ultimo Contacto'].fillna(\"2025-01-01T00:00:00-0300\")\t\n","#df['Nacimiento'] = df['Nacimiento'].fillna(\"2025-01-01\")\n","df = df[[\"documento\",\"FApertura\",\"Nacimiento\",\"Ultimo Contacto\",\"Clasificacion\",\"Probabilidad\"]].copy()"],"execution_count":219,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gziGkIKgvuRV"},"source":["A ver qué pinta tiene esto..."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"HB7oqrl-__4p","executionInfo":{"status":"ok","timestamp":1625500605041,"user_tz":180,"elapsed":256,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}},"outputId":"be52a095-2e8c-4859-f248-51a6db6c44c1"},"source":["df.head()"],"execution_count":220,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>documento</th>\n","      <th>FApertura</th>\n","      <th>Nacimiento</th>\n","      <th>Ultimo Contacto</th>\n","      <th>Clasificacion</th>\n","      <th>Probabilidad</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>43087241.0</td>\n","      <td>2021-05-08</td>\n","      <td>2001-02-20</td>\n","      <td>2020-12-17T00:00:00-0300</td>\n","      <td>0</td>\n","      <td>1.634481e-06</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>40762085.0</td>\n","      <td>2021-04-16</td>\n","      <td>1994-11-10</td>\n","      <td>2021-04-27T00:00:00-0300</td>\n","      <td>0</td>\n","      <td>7.474762e-01</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>42419804.0</td>\n","      <td>2021-03-31</td>\n","      <td>2000-02-23</td>\n","      <td>2021-03-26T00:00:00-0300</td>\n","      <td>0</td>\n","      <td>9.182343e-15</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>94451766.0</td>\n","      <td>2021-03-23</td>\n","      <td>1983-05-20</td>\n","      <td>2021-04-15T00:00:00-0300</td>\n","      <td>0</td>\n","      <td>2.383016e-01</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>45989801.0</td>\n","      <td>2021-03-24</td>\n","      <td>2004-06-30</td>\n","      <td>2021-04-06T00:00:00-0300</td>\n","      <td>0</td>\n","      <td>3.979592e-01</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    documento   FApertura  ... Clasificacion  Probabilidad\n","0  43087241.0  2021-05-08  ...             0  1.634481e-06\n","1  40762085.0  2021-04-16  ...             0  7.474762e-01\n","2  42419804.0  2021-03-31  ...             0  9.182343e-15\n","3  94451766.0  2021-03-23  ...             0  2.383016e-01\n","4  45989801.0  2021-03-24  ...             0  3.979592e-01\n","\n","[5 rows x 6 columns]"]},"metadata":{"tags":[]},"execution_count":220}]},{"cell_type":"markdown","metadata":{"id":"OC_Wd2ibD5IB"},"source":["# Reshapeo de los datos para mayor funcionalidad"]},{"cell_type":"markdown","metadata":{"id":"NBUROFXfvwYW"},"source":["En base a las columnas de fecha de apertura del caso y la de último contacto con el caso positivo, voy a generar una columna nueva que las reemplace que indique si la persona se aisló o no. \n","Valdrá 1 si la persona se aisló- que se traduce en que la fecha de apertura > fecha de último contacto- y 0 si no se aisló - que se traduce en que fecha de apertura <= fecha de último contacto.\n","\n","También, en base a la columna de fecha de nacimiento, genero una nueva columna que indique la edad del CE."]},{"cell_type":"markdown","metadata":{"id":"4Nzss2xbxBTW"},"source":["Primero formateamos las fechas para que queden todas con un formato parejo, así puedo operar entre ellas."]},{"cell_type":"code","metadata":{"id":"jG16AqISwIjV","executionInfo":{"status":"ok","timestamp":1625500607406,"user_tz":180,"elapsed":288,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}}},"source":["df[\"FApertura\"] = df['FApertura'].apply(lambda x: datetime.strptime(x,\"%Y-%m-%d\"))\n","df[\"Ultimo Contacto\"] = df[\"Ultimo Contacto\"].apply(lambda x: datetime.strptime(x,\"%Y-%m-%dT00:00:00-0300\"))\n","df[\"Nacimiento\"] = df[\"Nacimiento\"].apply(lambda x: datetime.strptime(x,\"%Y-%m-%d\"))"],"execution_count":221,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TzGg_s4dxFzr"},"source":["Ahora genero la columnas columnas de Aislamiento y Edad."]},{"cell_type":"code","metadata":{"id":"PAX5MN6qxUhl","executionInfo":{"status":"ok","timestamp":1625500609302,"user_tz":180,"elapsed":294,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}}},"source":["df[\"Edad\"] = (df['FApertura'] - df[\"Nacimiento\"]).apply(lambda x: x.total_seconds()//3.154e+7)"],"execution_count":222,"outputs":[]},{"cell_type":"code","metadata":{"id":"VYwTQllvxia1","executionInfo":{"status":"ok","timestamp":1625500610346,"user_tz":180,"elapsed":1,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}}},"source":["df[\"Aislado\"] = df[\"FApertura\"] <= df[\"Ultimo Contacto\"]"],"execution_count":223,"outputs":[]},{"cell_type":"code","metadata":{"id":"WvVi4oXOyKDq","executionInfo":{"status":"ok","timestamp":1625500611382,"user_tz":180,"elapsed":1,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}}},"source":["df = df[[\"Aislado\",\"Edad\",\"Clasificacion\",\"Probabilidad\"]].copy()"],"execution_count":224,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":418},"id":"SYxna16ByYJ4","executionInfo":{"status":"ok","timestamp":1625500612250,"user_tz":180,"elapsed":4,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}},"outputId":"518f88c6-a2f9-42f0-bdd3-3577bc2fb3b0"},"source":["df"],"execution_count":225,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Aislado</th>\n","      <th>Edad</th>\n","      <th>Clasificacion</th>\n","      <th>Probabilidad</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>False</td>\n","      <td>20.0</td>\n","      <td>0</td>\n","      <td>1.634481e-06</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>True</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>7.474762e-01</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>False</td>\n","      <td>21.0</td>\n","      <td>0</td>\n","      <td>9.182343e-15</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>True</td>\n","      <td>37.0</td>\n","      <td>0</td>\n","      <td>2.383016e-01</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>True</td>\n","      <td>16.0</td>\n","      <td>0</td>\n","      <td>3.979592e-01</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>227</th>\n","      <td>False</td>\n","      <td>24.0</td>\n","      <td>1</td>\n","      <td>3.979592e-01</td>\n","    </tr>\n","    <tr>\n","      <th>232</th>\n","      <td>False</td>\n","      <td>41.0</td>\n","      <td>1</td>\n","      <td>5.029178e-01</td>\n","    </tr>\n","    <tr>\n","      <th>235</th>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>2.507795e-01</td>\n","    </tr>\n","    <tr>\n","      <th>236</th>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>2.301172e-02</td>\n","    </tr>\n","    <tr>\n","      <th>237</th>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>1.660057e-04</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>129 rows × 4 columns</p>\n","</div>"],"text/plain":["     Aislado  Edad  Clasificacion  Probabilidad\n","0      False  20.0              0  1.634481e-06\n","1       True  26.0              0  7.474762e-01\n","2      False  21.0              0  9.182343e-15\n","3       True  37.0              0  2.383016e-01\n","4       True  16.0              0  3.979592e-01\n","..       ...   ...            ...           ...\n","227    False  24.0              1  3.979592e-01\n","232    False  41.0              1  5.029178e-01\n","235    False   0.0              1  2.507795e-01\n","236    False   0.0              1  2.301172e-02\n","237    False   0.0              1  1.660057e-04\n","\n","[129 rows x 4 columns]"]},"metadata":{"tags":[]},"execution_count":225}]},{"cell_type":"markdown","metadata":{"id":"JCGEW39D0NxX"},"source":["Convierto los booleanos de Aislado en valores enteros para poder darle una interpretabilidad matemática en el modelado."]},{"cell_type":"code","metadata":{"id":"mU12G9SJzE-y","executionInfo":{"status":"ok","timestamp":1625500615478,"user_tz":180,"elapsed":295,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}}},"source":["df[\"Aislado\"] = df[\"Aislado\"].astype(int)"],"execution_count":226,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":418},"id":"oLHCjGBtzpof","executionInfo":{"status":"ok","timestamp":1625500616569,"user_tz":180,"elapsed":4,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}},"outputId":"453d8767-a27c-4c80-9c0e-6b528f05ab57"},"source":["df"],"execution_count":227,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Aislado</th>\n","      <th>Edad</th>\n","      <th>Clasificacion</th>\n","      <th>Probabilidad</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>20.0</td>\n","      <td>0</td>\n","      <td>1.634481e-06</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>7.474762e-01</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>21.0</td>\n","      <td>0</td>\n","      <td>9.182343e-15</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>37.0</td>\n","      <td>0</td>\n","      <td>2.383016e-01</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>16.0</td>\n","      <td>0</td>\n","      <td>3.979592e-01</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>227</th>\n","      <td>0</td>\n","      <td>24.0</td>\n","      <td>1</td>\n","      <td>3.979592e-01</td>\n","    </tr>\n","    <tr>\n","      <th>232</th>\n","      <td>0</td>\n","      <td>41.0</td>\n","      <td>1</td>\n","      <td>5.029178e-01</td>\n","    </tr>\n","    <tr>\n","      <th>235</th>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>2.507795e-01</td>\n","    </tr>\n","    <tr>\n","      <th>236</th>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>2.301172e-02</td>\n","    </tr>\n","    <tr>\n","      <th>237</th>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>1.660057e-04</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>129 rows × 4 columns</p>\n","</div>"],"text/plain":["     Aislado  Edad  Clasificacion  Probabilidad\n","0          0  20.0              0  1.634481e-06\n","1          1  26.0              0  7.474762e-01\n","2          0  21.0              0  9.182343e-15\n","3          1  37.0              0  2.383016e-01\n","4          1  16.0              0  3.979592e-01\n","..       ...   ...            ...           ...\n","227        0  24.0              1  3.979592e-01\n","232        0  41.0              1  5.029178e-01\n","235        0   0.0              1  2.507795e-01\n","236        0   0.0              1  2.301172e-02\n","237        0   0.0              1  1.660057e-04\n","\n","[129 rows x 4 columns]"]},"metadata":{"tags":[]},"execution_count":227}]},{"cell_type":"markdown","metadata":{"id":"084wPagOEBFD"},"source":["Ahora sí tendría que meterme de lleno con el modelado."]},{"cell_type":"markdown","metadata":{"id":"IhAztcQThIHB"},"source":["# **OPCIÓN 1:** Optimización de hiperparámetros, regresión logística, kfolds y k best."]},{"cell_type":"markdown","metadata":{"id":"EnT5-5LUhW_F"},"source":["**Test-train split:**\n","\n","Va a ser importante a la hora de trabajar separar parte de los datos para entrenar el modelo (obtener los parámetros) y dejar otra parte para evaluar su performance. Haciendo eso, me puedo encontrar cualquiera de los siguientes escenarios:\n","1. Que la performance sea baja en el set de entrenamiento y baja también en el set de evaluación. Si este es el caso, voy a estar en necesidad o bien de más datos o bien de más features.\n","2. Que la performance sea alta en el set de entrenamiento y baja en el set de evaluación. En este caso, estaría sobreajustando y una posible solución sería sumar más datos a mi modelo o aplicar regularización.\n","3. Que la performance sea alta en el set de entrenamiento y también alta en el set de evaluación. Este es el caso ideal: querría decir que aprendí parámetros que me sirven para generalizar a datos nuevos sin sobreajustar."]},{"cell_type":"markdown","metadata":{"id":"JVOlwtclhdqW"},"source":["**Optimización de hiperparámetros: búsqueda de los mejores C y potencia para elevar mis features posibles** \n","\n","Necesito encontrar hiperparámetros tal que se maximice la performance del clasificador en el dataset de evaluación.\n","Para abordar el problema entonces haré lo siguiente:\n","1. Genero una función que entrene y evalúe el clasificador usando un train-test split, que incorpore como input los hiperparámetros.\n","2. Para cada elección del par de hiperparámetros, repitos este procedimiento unas cuantas veces y me quedo con la performance media. Esto es necesario porque el train-test split es aleatorio.\n","3. Repito esto para todas las combinaciones de hiperparámetros y hallo aquella que maximiza la performance del clasificador."]},{"cell_type":"markdown","metadata":{"id":"0ctvHK5_hQ2f"},"source":["Introduzco dos métricas conocidas como sensibilidad y especificidad: la sensibilidad es la probabilidad de clasificar correctamente a un individuo enfermo, mientras que la especificidad es la probabilidad de que un sujeto sano tenga un resultado negativo en la prueba.\n","Valiéndome de ambas, introduzco la *balanced accuracy* como el promedio de estas dos métrica, un único número que resume la performance de un modelo a diferencia de la matriz de confusión que tiene 4 entradas y es un quilombo de interpretar."]},{"cell_type":"code","metadata":{"id":"UOOabMtnh-zE","executionInfo":{"status":"ok","timestamp":1625500619707,"user_tz":180,"elapsed":248,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}}},"source":["def balanced_accuracy(cm): # funcion para calcular la \"balanced accuracy\"\n","  sensibilidad = cm[1,1]/(cm[1,1]+cm[0,1])\n","  especificidad = cm[0,0]/(cm[1,0]+cm[0,0])\n","  return [sensibilidad, especificidad, (sensibilidad + especificidad)/2]"],"execution_count":228,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FyTm7Wjoy8zM"},"source":["Armo un potencial clasificador:"]},{"cell_type":"code","metadata":{"id":"J2VtvF-Yy--Q","executionInfo":{"status":"ok","timestamp":1625500621467,"user_tz":180,"elapsed":310,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}}},"source":["def classifier(X,y,n,c):  # X es la matriz de features, y los labels, n-1 la potencia máxima en la que aparecerán los features, C es la constante de regularización\n","\n","  for i in np.arange(2,n):\n","     X = np.concatenate((X,X**i), axis=1)\n","  \n","  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n","\n","  scaler = MinMaxScaler() # primero creo un objeto MinMaxScaler. Por defecto, esto normaliza los datos al intervalo [0,1]\n","  scaler.fit(X_train) # encuentro los parametros para el escaleo\n","  X_train = scaler.transform(X_train) # aplico la transformacion\n","\n","  scaler = MinMaxScaler() # primero creo un objeto MinMaxScaler. Por defecto, esto normaliza los datos al intervalo [0,1]\n","  scaler.fit(X_test) # encuentro los parametros para el escaleo\n","  X_test = scaler.transform(X_test) # aplico la transformacion\n","\n","  regLog = LogisticRegression(penalty = 'l2', class_weight='balanced', C=c, max_iter=10000) \n","  regLog.fit(X_train, y_train) \n","  \n","  ypred_train = regLog.predict(X_train) # con esto obtengo la predicción de las etiquetas en base a mis datos\n","  cm_train = confusion_matrix(ypred_train, y_train) # primera entrada son las etiquetas predichas, segunda son las reales\n","  metricas_train = balanced_accuracy(cm_train)\n","\n","  ypred_test = regLog.predict(X_test) # con esto obtengo la predicción de las etiquetas en base a mis datos\n","  cm_test= confusion_matrix(ypred_test, y_test) # primera entrada son las etiquetas predichas, segunda son las reales\n","  metricas_test = balanced_accuracy(cm_test)\n","\n","  return metricas_train[2], metricas_test[2]"],"execution_count":229,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WvjPpx9c4plY"},"source":["Defino los campos a considerar como features, la matriz X a analizar de features y la variable target:"]},{"cell_type":"code","metadata":{"id":"oFBXmEPqzXOM","executionInfo":{"status":"ok","timestamp":1625500624014,"user_tz":180,"elapsed":420,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}}},"source":["features = [\"Aislado\", \"Edad\",\"Probabilidad\"]\n","X = df[features].values # Defino la variable X (los features). El método .values, me lleva la Serie de pandas a un array de numpy. El .reshape(-1,1) es para llevarlo a la forma matricial que le gusta a sklearn \n","y = df['Clasificacion'] # Defino la variable y"],"execution_count":230,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cGNXhSo74yQV"},"source":["Ahora sí, me fijo qué valores de n y c son los mejores hiperparámetros:"]},{"cell_type":"markdown","metadata":{"id":"n9HpgJj7EMT-"},"source":["Primero calculo la BA para cada instancia (par de n y c)."]},{"cell_type":"code","metadata":{"id":"3eeVbvgjzZiw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1625501516767,"user_tz":180,"elapsed":887519,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}},"outputId":"859490ab-cad5-48cc-a6e4-fd033717158a"},"source":["n_values = np.arange(1,7) # rango de potencias maximas \n","c_values = np.arange(0.2,5,0.2) # rango de constantes de regularizacion\n","\n","iterations = 1000 \n","\n","mean_BA_train = np.zeros((len(n_values),len(c_values))) #  los arrays con los balanced accuracy para cada combinacion de hiperparametros, para train y test\n","mean_BA_test = np.zeros((len(n_values),len(c_values)))\n","\n","for xx,n in enumerate(n_values): # itero sobre n\n","    for yy,c in enumerate(c_values): # itero sobre c\n","      BA_test_temp = [] # variables temporales para ir poniendo los resultados a lo largo de las iteraciones\n","      BA_train_temp = []\n","      print([n,c]) # esto es para los ansiosos\n","      for it in np.arange(iterations): # itero\n","          BA_train, BA_test = classifier(X,y,n,c)  # calculo las balanced accuracy para esos hiperparametros\n","          BA_test_temp.append(BA_test) # agrego a las variables temporales\n","          BA_train_temp.append(BA_train)\n","      mean_BA_train[xx,yy] = np.mean(BA_train_temp) # calculo promedios\n","      mean_BA_test[xx,yy] = np.mean(BA_test_temp)\n"],"execution_count":231,"outputs":[{"output_type":"stream","text":["[1, 0.2]\n","[1, 0.4]\n","[1, 0.6000000000000001]\n","[1, 0.8]\n","[1, 1.0]\n","[1, 1.2]\n","[1, 1.4000000000000001]\n","[1, 1.6]\n","[1, 1.8]\n","[1, 2.0]\n","[1, 2.2]\n","[1, 2.4000000000000004]\n","[1, 2.6000000000000005]\n","[1, 2.8000000000000003]\n","[1, 3.0000000000000004]\n","[1, 3.2]\n","[1, 3.4000000000000004]\n","[1, 3.6000000000000005]\n","[1, 3.8000000000000003]\n","[1, 4.0]\n","[1, 4.2]\n","[1, 4.4]\n","[1, 4.6000000000000005]\n","[1, 4.800000000000001]\n","[2, 0.2]\n","[2, 0.4]\n","[2, 0.6000000000000001]\n","[2, 0.8]\n","[2, 1.0]\n","[2, 1.2]\n","[2, 1.4000000000000001]\n","[2, 1.6]\n","[2, 1.8]\n","[2, 2.0]\n","[2, 2.2]\n","[2, 2.4000000000000004]\n","[2, 2.6000000000000005]\n","[2, 2.8000000000000003]\n","[2, 3.0000000000000004]\n","[2, 3.2]\n","[2, 3.4000000000000004]\n","[2, 3.6000000000000005]\n","[2, 3.8000000000000003]\n","[2, 4.0]\n","[2, 4.2]\n","[2, 4.4]\n","[2, 4.6000000000000005]\n","[2, 4.800000000000001]\n","[3, 0.2]\n","[3, 0.4]\n","[3, 0.6000000000000001]\n","[3, 0.8]\n","[3, 1.0]\n","[3, 1.2]\n","[3, 1.4000000000000001]\n","[3, 1.6]\n","[3, 1.8]\n","[3, 2.0]\n","[3, 2.2]\n","[3, 2.4000000000000004]\n","[3, 2.6000000000000005]\n","[3, 2.8000000000000003]\n","[3, 3.0000000000000004]\n","[3, 3.2]\n","[3, 3.4000000000000004]\n","[3, 3.6000000000000005]\n","[3, 3.8000000000000003]\n","[3, 4.0]\n","[3, 4.2]\n","[3, 4.4]\n","[3, 4.6000000000000005]\n","[3, 4.800000000000001]\n","[4, 0.2]\n","[4, 0.4]\n","[4, 0.6000000000000001]\n","[4, 0.8]\n","[4, 1.0]\n","[4, 1.2]\n","[4, 1.4000000000000001]\n","[4, 1.6]\n","[4, 1.8]\n","[4, 2.0]\n","[4, 2.2]\n","[4, 2.4000000000000004]\n","[4, 2.6000000000000005]\n","[4, 2.8000000000000003]\n","[4, 3.0000000000000004]\n","[4, 3.2]\n","[4, 3.4000000000000004]\n","[4, 3.6000000000000005]\n","[4, 3.8000000000000003]\n","[4, 4.0]\n","[4, 4.2]\n","[4, 4.4]\n","[4, 4.6000000000000005]\n","[4, 4.800000000000001]\n","[5, 0.2]\n","[5, 0.4]\n","[5, 0.6000000000000001]\n","[5, 0.8]\n","[5, 1.0]\n","[5, 1.2]\n","[5, 1.4000000000000001]\n","[5, 1.6]\n","[5, 1.8]\n","[5, 2.0]\n","[5, 2.2]\n","[5, 2.4000000000000004]\n","[5, 2.6000000000000005]\n","[5, 2.8000000000000003]\n","[5, 3.0000000000000004]\n","[5, 3.2]\n","[5, 3.4000000000000004]\n","[5, 3.6000000000000005]\n","[5, 3.8000000000000003]\n","[5, 4.0]\n","[5, 4.2]\n","[5, 4.4]\n","[5, 4.6000000000000005]\n","[5, 4.800000000000001]\n","[6, 0.2]\n","[6, 0.4]\n","[6, 0.6000000000000001]\n","[6, 0.8]\n","[6, 1.0]\n","[6, 1.2]\n","[6, 1.4000000000000001]\n","[6, 1.6]\n","[6, 1.8]\n","[6, 2.0]\n","[6, 2.2]\n","[6, 2.4000000000000004]\n","[6, 2.6000000000000005]\n","[6, 2.8000000000000003]\n","[6, 3.0000000000000004]\n","[6, 3.2]\n","[6, 3.4000000000000004]\n","[6, 3.6000000000000005]\n","[6, 3.8000000000000003]\n","[6, 4.0]\n","[6, 4.2]\n","[6, 4.4]\n","[6, 4.6000000000000005]\n","[6, 4.800000000000001]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"40lF-D6gERi0"},"source":["De forma gráfica:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":675},"id":"eL1_3qfq1wpi","executionInfo":{"status":"ok","timestamp":1625503236617,"user_tz":180,"elapsed":1324,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}},"outputId":"dfb1b4bf-6683-470a-bea2-b45ca01bdc2b"},"source":["fig, ax = plt.subplots(1,1, figsize=(8,8))  # visualizacion train set\n","img = ax.imshow(mean_BA_train) # graficamos la matriz\n","y_label_list = n_values # estos son los ticks de los ejes\n","x_label_list = c_values\n","ax.set_xticks(np.arange(len(c_values))) # creo los ticks de los ejes\n","ax.set_yticks(np.arange(len(n_values)))\n","ax.set_yticklabels(y_label_list) # pongo los ticks de los ejes\n","ax.set_xticklabels(x_label_list)\n","plt.xlabel('C (constante de regularizacion)', fontsize=15) # le pongo nombre a ejes y titulo \n","plt.ylabel('n (potencia maxima para elevar)', fontsize=15)\n","plt.title('BA (train set)', fontsize=20)\n","fig.colorbar(img, orientation=\"horizontal\", pad=0.2) # la barra de colores donde no me moleste\n","\n","fig, ax = plt.subplots(1,1, figsize=(8,8)) # visualizacion test set, ver comentarios para el caso train, es idéntico\n","img = ax.imshow(mean_BA_test)\n","y_label_list = n_values\n","x_label_list = c_values\n","ax.set_xticks(np.arange(len(c_values)))\n","ax.set_yticks(np.arange(len(n_values)))\n","ax.set_yticklabels(y_label_list)\n","ax.set_xticklabels(x_label_list)\n","plt.xlabel('C (constante de regularizacion)', fontsize=15)\n","plt.ylabel('n (potencia maxima para elevar)', fontsize=15)\n","plt.title('BA (test set)', fontsize=20)\n","fig.colorbar(img, orientation=\"horizontal\", pad=0.2)"],"execution_count":232,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.colorbar.Colorbar at 0x7fc31e3317d0>"]},"metadata":{"tags":[]},"execution_count":232},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x576 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x576 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"pXxNAPQA11o0"},"source":["Del gráfico de balanced accuracy para el conjunto de datos de entrenamiento veo, como es esperado, que aumenta la performance a medida que sumo potencias de grado mayor de los features. No obstante, en el caso del test set no es tan simple. Observo que se maximiza el desempeño de mi modelo cuando tengo una potencia máxima n=6 y la constante de regularizacion tiene un valor de 0.2. De ahora en más cuando haga regresión logística me va a servir usar esos dos valores pues tendré la mejor performance posible."]},{"cell_type":"markdown","metadata":{"id":"cl9o3K7WBFpK"},"source":["Pruebo con n=1 y c=0.2 para la regresión logística (*porque pintó*):\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":493},"id":"NWYDuxuO5Mu0","executionInfo":{"status":"ok","timestamp":1625503247897,"user_tz":180,"elapsed":1382,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}},"outputId":"207b39e8-282e-463f-dc04-23d253dbb3e3"},"source":["X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3) #Armo el split\n","\n","scaler = MinMaxScaler() #Escaleo por separado ambos sets\n","scaler.fit(X_train) \n","X_train = scaler.transform(X_train)\n","\n","scaler = MinMaxScaler() #Escaleo por separado ambos sets\n","scaler.fit(X_test) \n","X_test = scaler.transform(X_test)\n","regLog_1 = LogisticRegression(penalty='l2', C=0.2, max_iter=10000) #Inicializo nuevamente el modelo. max_iter es la cantidad de iteraciones máximas del algoritmo de optimización de parámetros antes de detenerse.\n","regLog_1.fit(X_train, y_train) #Ajusto el modelo con los datos de entrenamiento\n","\n","probas_train = regLog_1.predict_proba(X_train)  #Probabilidades con datos de entrenamiento\n","probas_test = regLog_1.predict_proba(X_test)  #Probabilidades con datos de evaluación\n","\n","fpr_train, tpr_train, thresholds_train = roc_curve(y_train, probas_train[:,1]) #Para plotear curva ROC con datos de entrenamiento\n","fpr_test, tpr_test, thresholds_test = roc_curve(y_test, probas_test[:,1]) #Para plotear curva ROC con datos de evaluacion\n","\n","auc_train = roc_auc_score(y_train, probas_train[:,1]) #AUC con datos de entrenamiento\n","auc_test = roc_auc_score(y_test, probas_test[:,1]) #AUC con datos de evaluación\n","\n","#Para plotear ROC (codigo de un notebook anterior)\n","\n","fig, ax = plt.subplots(figsize = (10,7))\n","ax.set_title('Verdaderos positivos vs. falsos positivos')\n","ax.plot(fpr_train,tpr_train, label = \"Entrenamiento\") # graficamos la curva ROC para el set de entrenamiento\n","ax.plot(fpr_test,tpr_test, label = \"Evaluacion\") # graficamos la curva ROC para el set de evaluacion\n","\n","ax.set_xlabel('Tasa de falsos positivos') # Etiqueta del eje x\n","ax.set_ylabel('Tasa de verdaderos positivos') # Etiqueta del eje y\n","\n","plt.legend()\n","\n","print('AUC entrenamiento: {}'.format(round(auc_train,4)))  \n","print('AUC evaluacion: {}'.format(round(auc_test,4)))  "],"execution_count":233,"outputs":[{"output_type":"stream","text":["AUC entrenamiento: 0.6394\n","AUC evaluacion: 0.5397\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x504 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"mPJZ4k4yBLYx"},"source":["Pruebo con n=2 y c=0.2 para la regresión logística:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":493},"id":"UVhqHjKG-JQ8","executionInfo":{"status":"ok","timestamp":1625503256095,"user_tz":180,"elapsed":1392,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}},"outputId":"18041da0-5100-41f3-b9cc-e769debdb007"},"source":["X_1 = np.concatenate((X, X**2), axis=1) # agrego features elevados a potencias \n","\n","X_train, X_test, y_train, y_test = train_test_split(X_1, y, test_size=0.3) #Armo el split\n","\n","scaler = MinMaxScaler() #Escaleo por separado ambos sets\n","scaler.fit(X_train) \n","X_train = scaler.transform(X_train)\n","\n","scaler = MinMaxScaler() #Escaleo por separado ambos sets\n","scaler.fit(X_test) \n","X_test = scaler.transform(X_test)\n","regLog_1 = LogisticRegression(penalty='l2', C=0.2, max_iter=10000) #Inicializo nuevamente el modelo. max_iter es la cantidad de iteraciones máximas del algoritmo de optimización de parámetros antes de detenerse.\n","regLog_1.fit(X_train, y_train) #Ajusto el modelo con los datos de entrenamiento\n","\n","probas_train = regLog_1.predict_proba(X_train)  #Probabilidades con datos de entrenamiento\n","probas_test = regLog_1.predict_proba(X_test)  #Probabilidades con datos de evaluación\n","\n","fpr_train, tpr_train, thresholds_train = roc_curve(y_train, probas_train[:,1]) #Para plotear curva ROC con datos de entrenamiento\n","fpr_test, tpr_test, thresholds_test = roc_curve(y_test, probas_test[:,1]) #Para plotear curva ROC con datos de evaluacion\n","\n","auc_train = roc_auc_score(y_train, probas_train[:,1]) #AUC con datos de entrenamiento\n","auc_test = roc_auc_score(y_test, probas_test[:,1]) #AUC con datos de evaluación\n","\n","#Para plotear ROC (codigo de un notebook anterior)\n","\n","fig, ax = plt.subplots(figsize = (10,7))\n","ax.set_title('Verdaderos positivos vs. falsos positivos')\n","ax.plot(fpr_train,tpr_train, label = \"Entrenamiento\") # graficamos la curva ROC para el set de entrenamiento\n","ax.plot(fpr_test,tpr_test, label = \"Evaluacion\") # graficamos la curva ROC para el set de evaluacion\n","\n","ax.set_xlabel('Tasa de falsos positivos') # Etiqueta del eje x\n","ax.set_ylabel('Tasa de verdaderos positivos') # Etiqueta del eje y\n","\n","plt.legend()\n","\n","print('AUC entrenamiento: {}'.format(round(auc_train,4)))  \n","print('AUC evaluacion: {}'.format(round(auc_test,4)))  "],"execution_count":234,"outputs":[{"output_type":"stream","text":["AUC entrenamiento: 0.6609\n","AUC evaluacion: 0.4935\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x504 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"VG-wY12JBTgS"},"source":["Si corro varias veces al bloque de código anterior, observo que hay una variabilidad natural en las curvas. Una forma de atenuar este problema es usar *validación cruzada estratificada con K folds*, la cual funciona de la siguiente manera:\n","\n","1. Se dividen los datos en K subconjuntos de forma tal que la prevalencia de ambas clases esté balanceada en cada subconjunto.\n","2. Se elige uno de esos subconjuntos y se lo designa set de evaluación. Todos los demás son sets de entrenamiento. Se entrena entonces al modelo usando estos datos para evaluación y entrenamiento y se genera una predicción para cada uno de los datos en el conjunto que fue elegido como evaluación.\n","3. Se repite el proceso usando cada uno de los K subconjuntos para evaluación exactamente una vez.\n","De esta forma, todos los datos fueron usados una vez para evaluación y al menos una vez para entrenamiento. Además, resulta una predicción para cada uno de los casos, y esta predicción no está afectada por overfitting (porque ese caso no fue usado en entrenamiento).\n","\n","Lo implemento a continuación:"]},{"cell_type":"code","metadata":{"id":"k-YU5LbVWqrZ","executionInfo":{"status":"ok","timestamp":1625503263648,"user_tz":180,"elapsed":267,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}}},"source":["ybck = y.copy()"],"execution_count":235,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"80rrLehUW9wQ","executionInfo":{"status":"ok","timestamp":1625503265690,"user_tz":180,"elapsed":2,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}},"outputId":"19a7cef6-ead8-469b-87ab-1eafb6a29f70"},"source":["len(y)"],"execution_count":236,"outputs":[{"output_type":"execute_result","data":{"text/plain":["129"]},"metadata":{"tags":[]},"execution_count":236}]},{"cell_type":"code","metadata":{"id":"_Oe9BFMYWXsO","executionInfo":{"status":"ok","timestamp":1625503268289,"user_tz":180,"elapsed":1,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}}},"source":["y = y.to_numpy()"],"execution_count":237,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UEH8Qh00W7X7","executionInfo":{"status":"ok","timestamp":1625503272244,"user_tz":180,"elapsed":503,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}},"outputId":"c2e1917b-2ab7-4177-96b6-bee3a398c9c9"},"source":["y"],"execution_count":238,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"]},"metadata":{"tags":[]},"execution_count":238}]},{"cell_type":"code","metadata":{"id":"ya_JaafQ6GnB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1625503923854,"user_tz":180,"elapsed":391,"user":{"displayName":"Carla Arévalo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7ZiJkSDkSlRI1tTTUczO4hyF49WMuh07b9vW6WQ=s64","userId":"13785080829800690294"}},"outputId":"247f0fc6-9ec2-4fe2-f614-a505326f44ba"},"source":["X_2 = np.concatenate((X, X**2, X**3, X**4, X**5, X**6), axis=1) # agrego features elevados a potencias \n","skf = StratifiedKFold(n_splits=5, shuffle=True) # 5 folds es un número típico si tenemos suficientes datos. Pedimos shuffle=True para que sea al azar la separación en subgrupos\n","skf.get_n_splits(X_2, y) # arma los folds a partir de los datos\n","\n","auc_values = [] # aca es donde van a ir a parar los AUCs de cada fold\n","scores = np.array([])     # aca es donde van a ir a parar los scores computados para todos los casos\n","indices = np.array([])    # aca es donde van a ir a parar los indices correspondientes a las entradas de scores\n","\n","for train_index, test_index in skf.split(X_2, y): # va generando los indices que corresponden a train y test en cada fold\n","      X_train, X_test = X_2[train_index], X_2[test_index] # arma que es dato de entrenamiento y qué es dato de evaluación\n","      y_train, y_test = y[train_index], y[test_index]     # idem con los targets\n","\n","      scaler = MinMaxScaler() # primero creo un objeto MinMaxScaler. Por defecto, esto normaliza los datos al intervalo [0,1]\n","      scaler.fit(X_train) # encuentro los parametros para el escaleo\n","      X_train = scaler.transform(X_train) \n","\n","      scaler = MinMaxScaler() # primero creo un objeto MinMaxScaler. Por defecto, esto normaliza los datos al intervalo [0,1]\n","      scaler.fit(X_test) # encuentro los parametros para el escaleo\n","      X_test = scaler.transform(X_test) \n","\n","      selector = SelectKBest(k=\"all\") # por defecto, usa el F score de ANOVA y los Kbest features\n","      selector.fit(X_train, y_train) # encuentro los F scores \n","      X_train_fs = selector.transform(X_train) # me quedo con los features mejor rankeados en el set de entrenamiento\n","      X_test_fs = selector.transform(X_test) # me quedo con los features mejor rankeados en el set de evaluacion\n","      features = np.array(selector.get_support()).reshape((1,-1)) # esto me pone True si la variable correspondiente fue seleccionada y False sino\n","     \n","      regLog_1 = LogisticRegression(penalty = 'l2', max_iter=10000,C=0.2) # Inicializamos nuevamente el modelo. max_iter es la cantidad de iteraciones maximas del algoritmo de optimizacion de parametros antes de detenerse.\n","      regLog_1.fit(X_train, y_train) # Ajustamos el modelo con los datos de entrenamiento\n","\n","      probas_test = regLog_1.predict_proba(X_test)  # probabilidades con datos de evaluación\n","      fpr_test, tpr_test, thresholds_test = roc_curve(y_test, probas_test[:,1]) # para plotear curva ROC con datos de entrenamiento\n","      auc_test = roc_auc_score(y_test, probas_test[:,1]) #  AUC con datos de evaluación\n","\n","      auc_values.append(auc_test)\n","      scores = np.concatenate((scores,probas_test[:,1]),axis=0)\n","      indices = np.concatenate((indices,test_index),axis=0)\n","#return np.mean(auc_values)\n","print(\"Estos son los valores AUC para cada fold:\")\n","print(auc_values)\n","print(\"Estos es el promedio de todos los AUC:\")\n","print(np.mean(auc_values))\n","print(\"Estos son las probabilidades para cada sample:\")\n","print(scores)\n","print(\"Esta es la forma en que quedaron ordenados las entradas del vector anterior (indices):\")\n","print(indices)"],"execution_count":322,"outputs":[{"output_type":"stream","text":["Estos son los valores AUC para cada fold:\n","[0.7067669172932332, 0.5939849624060151, 0.6616541353383458, 0.701388888888889, 0.4722222222222222]\n","Estos es el promedio de todos los AUC:\n","0.627203425229741\n","Estos son las probabilidades para cada sample:\n","[0.23082157 0.24149114 0.28706994 0.23634449 0.30247554 0.32417179\n"," 0.24414578 0.23275745 0.2908856  0.2337662  0.3279436  0.28714153\n"," 0.25300675 0.23547057 0.31952673 0.23898912 0.27107076 0.31632074\n"," 0.23665811 0.24762288 0.23673778 0.23942828 0.42235279 0.31985024\n"," 0.32578145 0.32464045 0.34800614 0.34805462 0.22297228 0.34844071\n"," 0.40459749 0.38619078 0.20943704 0.23251239 0.2250194  0.22755053\n"," 0.22000269 0.39446611 0.34954003 0.23699665 0.23521676 0.21080215\n"," 0.36457932 0.21106253 0.3810814  0.23740551 0.22139506 0.26222069\n"," 0.34874736 0.35259144 0.36140172 0.35098652 0.37345553 0.23085195\n"," 0.37249221 0.36680907 0.37259912 0.36808587 0.36501585 0.22571157\n"," 0.23155385 0.36430333 0.36400742 0.22370182 0.22307335 0.22516572\n"," 0.22722303 0.22382472 0.36425067 0.36530494 0.36606796 0.22763182\n"," 0.22642764 0.36802149 0.41322073 0.38017649 0.33994621 0.36909503\n"," 0.22217717 0.26252752 0.22006973 0.32987724 0.22294807 0.40712719\n"," 0.21214607 0.21873752 0.27285715 0.21564417 0.21890328 0.21245156\n"," 0.22466677 0.21236987 0.2354922  0.36090447 0.33518264 0.35847148\n"," 0.22956305 0.22830455 0.23258731 0.2220647  0.38208056 0.41150409\n"," 0.33382961 0.33572602 0.2177045  0.22951298 0.2200695  0.22352123\n"," 0.23085934 0.25844979 0.2276326  0.45493805 0.24098373 0.37448696\n"," 0.37499131 0.37406826 0.21610063 0.35962735 0.22169144 0.40131193\n"," 0.21881099 0.4279562  0.28354236 0.20480048 0.2276326  0.3629459\n"," 0.21778506 0.41465801 0.36598932]\n","Esta es la forma en que quedaron ordenados las entradas del vector anterior (indices):\n","[  1.   4.   5.   7.   8.  15.  17.  22.  23.  28.  30.  35.  41.  47.\n","  59.  65.  69.  72.  75.  94. 102. 109. 111. 114. 123. 124.   0.   2.\n","  10.  12.  13.  16.  18.  31.  37.  38.  44.  48.  51.  61.  63.  74.\n","  80.  81.  86.  93.  96. 101. 110. 115. 122. 127.   6.  14.  20.  33.\n","  34.  42.  49.  53.  55.  57.  64.  66.  76.  78.  83.  85.  87.  90.\n","  91.  99. 103. 118. 120. 121. 125. 128.  11.  24.  25.  26.  27.  29.\n","  32.  36.  39.  45.  46.  54.  56.  60.  77.  79.  88.  92.  95.  98.\n"," 100. 104. 112. 116. 117. 119.   3.   9.  19.  21.  40.  43.  50.  52.\n","  58.  62.  67.  68.  70.  71.  73.  82.  84.  89.  97. 105. 106. 107.\n"," 108. 113. 126.]\n"],"name":"stdout"}]}]}